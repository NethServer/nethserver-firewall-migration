#!/bin/bash

#
# Copyright (C) 2022 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

set -e

device=$1

bdir=/usr/share/nethserver-firewall-migration-builder
dest_dir=usr/share/migration
image=$bdir/nethsecurity.img.gz
uimage=${image%.gz}
cimage=$bdir/nethsecurity-custom.img.gz
base_url=https://updates.nethsecurity.nethserver.org/stable
system_id=$(/sbin/e-smith/config getprop subscription SystemId)
secret=$(/sbin/e-smith/config getprop subscription Secret)
api_url=$(/sbin/e-smith/config getprop subscription ApiUrl)

avail=$(df -BM --output=avail / | tail -n +2 | cut -dM -f1)

function cleanup()
{
    kpartx -d $uimage &>/dev/null || :
    rm -rf $bdir/rootfs $bidr/part2
    rm -f $uimage
}

trap cleanup SIGTERM SIGINT EXIT

if [ "$avail" -lt 400 ]; then
    echo "Not enough free disk space"
    exit 1
fi

mkdir -p $bdir

echo "Downloading image ... "

if [[ -z "$secret" || -z "$system_id" ]]; then
    release=$(curl -f -s -L -m 30 $base_url/latest_release)
else
    if [[ "$api_url" == *"my.nethserver.com"*  ]]; then
        subtype="community"
    else
        subtype="enterprise"
    fi
    release=$(curl -f -s -L -m 30 "https://$system_id:$secret@distfeed.nethesis.it/repository/$subtype/nethsecurity/latest_release")
fi

release=$(curl -f -s -L -m 30 $base_url/latest_release)
img_name="nethsecurity-$release-x86-64-generic-squashfs-combined-efi.img.gz"
curl -s -L --connect-timeout 20 -o $image $base_url/$release/targets/x86/64/$img_name
sha=$(curl -s -L -m 30 $base_url/$release/targets/x86/64/sha256sums | grep $img_name | awk '{print $1}')
if [ "$sha" != "$(sha256sum $image | awk '{print $1}')" ]; then
    rm -f $image
    exit 1
fi

# Make sure everything is clean
cleanup

echo -n "Exporting configuration ... "
firewall-export
echo "ok"

echo -n "Extracting the image ... "
zcat -f $image > $uimage
echo "ok"

echo -n "Reading the image ... "
mkdir -p $bdir
dev="/dev/mapper/"$(kpartx -av $uimage 2>/dev/null | grep -owE -o 'loop[0-9]+p2')
unsquashfs -no-progress -d $bdir/rootfs $dev >/dev/null
echo "ok"
echo -n "Generating the custom image (this could take a while) ... "
mkdir -p $bdir/rootfs/$dest_dir
cp /var/lib/nethserver/firewall-migration/export.tar.gz $bdir/rootfs/$dest_dir
mksquashfs $bdir/rootfs $bdir/part2 -nopad -noappend -root-owned -comp xz -Xbcj x86 -b 256k -no-xattrs -no-progress > /dev/null
dd if=$bdir/part2 of=$dev bs=1M &>/dev/null
echo "ok"

echo -n "Compressing the custom image ... "
gzip -c $uimage > $cimage
echo "ok"

# Apply the image
if [ -n "$device" ]; then
    echo "Writing the image to disk ... see you on the other side!"
    # Make sure image and bins are saved in RAM
    /bin/cp $cimage /run
    /bin/cp /usr/bin/dd /usr/bin/zcat /usr/bin/sleep /usr/sbin/reboot /run
    # Enable sysrq
    echo 1 > /proc/sys/kernel/sysrq
    # Sync filesystems
    sync
    echo 3 > /proc/sys/vm/drop_caches
    # Mount all filesystems in read-only
    echo u > /proc/sysrq-trigger
    # Write the image
    # Use 64K block to minimize write errors
    /run/zcat /run/$(basename $cimage) 2>/dev/null | /run/dd of=$device bs=1M iflag=fullblock conv=fsync status=progress
    # Try to safely reboot
    echo 3 > /proc/sys/vm/drop_caches
    /run/sleep 1
    /run/reboot -f
    /run/sleep 5
    # Reboot without sync
    echo "b" 2>/dev/null > /proc/sysrq-trigger
fi
