#!/usr/bin/perl

#
# Copyright (C) 2022 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

use strict;
use warnings;
use JSON;
use NetAddr::IP;
use esmith::NetworksDB;
use esmith::ConfigDB;
use esmith::HostsDB;

sub slurp {
    my $file = shift;
    my $data;
    open my $fh, '<', $file or die;
    local $/ = undef;
    $data = <$fh>;
    close $fh;

    # trim
    $data =~ s/^\s+|\s+$//g;

    return $data;
}

my $ddb = esmith::ConfigDB->open_ro('dhcp');
my $ndb = esmith::NetworksDB->open_ro();
my $hdb = esmith::HostsDB->open_ro();

my @servers;
my %general;
my @reservations;
my %devices;

for my $i ($ndb->get_all_by_prop('type' => 'ethernet')) {
    my $addr_file = '/sys/class/net/'.$i->key.'/address';
    if (-e $addr_file) {
        $devices{$i->key} = slurp($addr_file);
    }
}

my $tot_limit = 0;
foreach ($ddb->get_all_by_prop('type' => 'range')) {
    my $interface = $_->key;
    my $netmask = $ndb->get($interface)->prop('netmask') || next;
    my $ipaddr = $ndb->get($interface)->prop('ipaddr') || next;
    my $start = $_->prop('DhcpRangeStart') || next;
    my $end = $_->prop('DhcpRangeEnd') || next;

    my $type = $ndb->get_prop($interface, 'type');
    my $status = $_->prop('status') || 'disabled';

    my $start_ip = new NetAddr::IP($start);
    my $net = esmith::util::computeLocalNetworkShortSpec($ipaddr,$netmask);
    $net = new NetAddr::IP($net);
    $start = $start_ip->numeric - $net->numeric;
    my $end_ip = new NetAddr::IP($end);
    my $limit = $end_ip->numeric - $start_ip->numeric;
    $tot_limit += $limit;
    my $ltime = int($_->prop('DhcpLeaseTime') || '86400') / 60;
    if ($ltime < 1) {
        $ltime = 1;
    }
    my @options;

    my $router = $_->prop('DhcpGatewayIP') || '';
    if ($router ne '') {
        push(@options, "3,$router");
    }

    my $dns_server = $_->prop('DhcpDNS') || '';
    if ($dns_server ne '') {
        push(@options, "6,$dns_server");
    }

    my $ntp_server = $_->prop('DhcpNTP') || '';
    if ($ntp_server ne '') {
        foreach (split(',',$ntp_server)) {
            push(@options, "4,$_");
        }
    }

    my $wins_server = $_->prop('DhcpWINS') || '';
    if ($wins_server ne '') {
        foreach (split(',',$wins_server)) {
            push(@options, "44,$_");
        }
    }

    my $tftp_server = $_->prop('DhcpTFTP') || '';
    if ($tftp_server ne '') {
        foreach (split(',',$tftp_server)) {
            push(@options, "66,$_");
        }
    }

    my $dhcp_domain = $_->prop('DhcpDomain') || '';
    if ($dhcp_domain ne '') {
        push(@options, "15,$dhcp_domain");
    }

    my %server = (
        "ignore" => ($status eq 'disabled') ? 1 : 0,
        "start" => $start,
        "limit" => $limit,
        "leasetime" => $ltime."m",
        "domain" => '',
        "dhcpv4" => ($status eq 'disabled') ? "disabled" : "server",
        "dhcpv6" => "disabled",
        "dhcp_option" => \@options,
        "type" => $type
    );

    if ($type eq 'ethernet') {
        my $hwaddr = $devices{$interface};
        next if (!$hwaddr);
        $server{'hwaddr'} = $hwaddr;
    } elsif ($type eq 'vlan') {
        my ($device, $vid) = split(/\./,$interface);
        my $hwaddr = $devices{$device};
        next if (!$hwaddr);
        $server{'vid'} = $vid;
        $server{'hwaddr'} = $hwaddr;
    } else {
        $server{'device'} = $interface;
    }


    push(@servers, \%server);

}

foreach ($hdb->get_all_by_prop('type'=>'local')) {
    $_->prop('MacAddress') || next;
    push(@reservations, {
        'name' => $_->key,
        'ip' => $_->prop('IpAddress'),
        'mac' => $_->prop('MacAddress'),
        'ns_description' => $_->prop('Description')
    });
    $tot_limit++;
}

$general{'dhcpleasemax'} = $tot_limit;
$general{'rebind_protection'} = '0';

print(encode_json({
            'general' => \%general,
            'servers' => \@servers,
            'reservations' => \@reservations
        }));

