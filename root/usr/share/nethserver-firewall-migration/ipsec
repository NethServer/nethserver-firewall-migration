#!/usr/bin/perl

#
# Copyright (C) 2022 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

use strict;
use warnings;
use JSON;
use esmith::NetworksDB;
use esmith::ConfigDB;

sub slurp {
    my $file = shift;
    my $data;
    open my $fh, '<', $file or die;
    local $/ = undef;
    $data = <$fh>;
    close $fh;

    # trim
    $data =~ s/^\s+|\s+$//g;

    return $data;
}

my $ndb = esmith::NetworksDB->open_ro();
my $vdb = esmith::ConfigDB->open_ro('vpn');

my @tunnels;
my @remotes;
my @proposals;
my @interfaces;
my @routes;
my %devices;

# Exit if VPN has not beend installed
if (!$vdb) {
    exit 0;
}

for my $i ($ndb->get_all_by_prop('type' => 'ethernet')) {
    my $addr_file = '/sys/class/net/'.$i->key.'/address';
    if (-e $addr_file) {
        $devices{$i->key} = slurp($addr_file);
    }
}

my %ikemap = (
    'permit' => 'ike', # IKEv1
    'yes' => 'ike', # IKEv2
    'no' => 'ikev1', # Force IKEv1
    'insist' => 'ikev2' # Force IKEv2
);

# Export tunnels
my $if_id = 10;
for my $t ($vdb->get_all_by_prop('type' => 'ipsec-tunnel')) {
    my %proposal_ike = (
        'name' => 'ike_proposal_'.$t->key,
        'dh_group' => 'modp2048',
        'hash_algorithm' => 'sha2_256',
        'encryption_algorithm' => 'aes256'
    );
    if ($t->prop('ike') eq 'custom') {
        $proposal_ike{'dh_group'} = $t->prop('ikepfsgroup');
        $proposal_ike{'hash_algorithm'} = $t->prop('ikehash');
        $proposal_ike{'encryption_algorithm'} = $t->prop('ikecipher');
    }
   
    my %proposal_esp = (
        'name' => 'esp_proposal_'.$t->key,
        'dh_group' => 'modp2048',
        'hash_algorithm' => 'sha2_256',
        'encryption_algorithm' => 'aes256'
    );
    if ($t->prop('esp') eq 'custom') {
        $proposal_esp{'dh_group'} = $t->prop('esppfsgroup');
        $proposal_esp{'hash_algorithm'} = $t->prop('esphash');
        $proposal_esp{'encryption_algorithm'} = $t->prop('espcipher');
    }
    if ($t->prop('pfs') eq 'no') {
        delete($proposal_esp{'dh_group'});
    }

    my $ikev2 = $t->prop('ikev2') || 'yes';
    my %tunnel = (
        'name' => 'tunnel_'.$t->key,
        'local_subnet' => [split(/,/,$t->prop('leftsubnets'))],
        'remote_subnet' => [split(/,/,$t->prop('rightsubnets'))],
        'rekeytime' => ($t->prop('salifetime') || '3600')."s",
        'startaction' => 'start',
        'closeaction' => 'none',
        'if_id' => $if_id,
        'crypto_proposal' => $proposal_esp{'name'},
        'dpdaction' => $t->prop('dpdaction') || 'restart',
        'ipcomp' => $t->prop('compress') eq 'no' ? 'false' : 'true'
    );

    my $left = substr($t->prop('left'), 1);
    my $local_ip = '%any';
    if (($ndb->get_prop($left, 'bootproto') || '')  eq 'none') {
        $local_ip = $ndb->get_prop($left, 'ipaddr') || '%any'
    }
    my %remote = (
        'name' => $t->key,
        'authentication_method' => 'psk',
        'local_ip' => $local_ip,
        'gateway' => $t->prop('right'),
        'rekeytime' => ($t->prop('ikelifetime') || '86400')."s",
        'pre_shared_key' => $t->prop('psk'),
        'local_identifier' => $t->prop('leftid'),
        'remote_identifier' => $t->prop('rightid'),
        'crypto_proposal' => $proposal_ike{'name'},
        'tunnel' => $tunnel{'name'},
        'keyexchange' => $ikemap{$ikev2},
        'enabled' => $t->prop('status') eq 'enabled' ? '1' : '0'
    );

    my %interface = (
        'name' => 'ipsec'.$if_id,
	'ifid' => $if_id,
	'mtu' =>  '1438',
	'zone' => 'ipsectun',
	'proto' => 'xfrm',
	'multicast' => 'true'
    );

    # connect xfrm to physical interface, logical interface are not supported
    if ($devices{$left}) {
        $interface{'hwaddr'} = $devices{$left};
    }

    for my $r (split(/,/,$t->prop('rightsubnets'))) {
        my %route = (
	    'target' => $r,
	    'interface' => 'ipsec'.$if_id,
        );
        push(@routes, \%route);
    }

    push(@tunnels, \%tunnel);
    push(@remotes, \%remote);
    push(@interfaces, \%interface);
    push(@proposals, \%proposal_ike);
    push(@proposals, \%proposal_esp);
    $if_id++;
}

print(encode_json({
            'tunnels' => \@tunnels,
            'remotes' => \@remotes,
            'interfaces' => \@interfaces,
            'routes' => \@routes,
            'proposals' => \@proposals
        }));
