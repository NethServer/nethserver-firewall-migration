#!/usr/bin/perl

#
# Copyright (C) 2022 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

use strict;
use warnings;
use JSON;
use esmith::ConfigDB;
use esmith::NetworksDB;
use NethServer::Firewall;

my $pdb = esmith::ConfigDB->open_ro('portforward');
my $cdb = esmith::ConfigDB->open_ro();
my $ndb = esmith::NetworksDB->open_ro();
my $fw = new NethServer::Firewall();

my $reflection = $cdb->get_prop('firewall', 'HairpinNat') eq 'enabled' ? '1' : '0';
my $ovpn_installed = (-f '/etc/e-smith/db/configuration/defaults/openvpn@host-to-net/status');
my $ovpn_status = $cdb->get_prop('openvpn@host-to-net', 'status');
my @reflection_zones;
if ($reflection == '1') {
    @reflection_zones = ('lan');
    if (defined($ndb->blue)) { push @reflection_zones, 'blue'; }
    if (defined($ndb->orange)) { push @reflection_zones, 'orange'; }
    if ($ovpn_installed && $ovpn_status eq 'enabled') {
        push(@reflection_zones, 'openvpnrw');
        push(@reflection_zones, 'openvpntun');
    }
}

my @redirects;

my $counter = 1;
foreach my $pf ($pdb->get_all_by_prop('type', 'pf')) {
    my @ports;
    my $proto = $pf->prop('Proto');
    $proto =~ s/,/ /g;
    if ($pf->prop('Src') =~ m/,/) {
        @ports = split(/,/,($pf->prop('Src') || ''));
    } else {
        # make sure to execute the port loop at least once
        @ports = ($pf->prop('Src'));
    }
    my @allow = split(/,/,($pf->prop('Allow') || ''));
    my $ai = 1;
    my $log = $pf->prop('Log') || 'none';
    # generate one rule for each source port
    for my $port (@ports) {
        $port =~ s/:/-/g; # convert range format
        # generate one rule for each IP limitation
        push(@redirects, {
            'target' => 'DNAT',
            'proto' => $proto,
            'src_dport' => $port,
            'dest_port' => $pf->prop('Dst') || $port,
            'dest_ip' => $fw->getAddress($pf->prop('DstHost')),
            'ns_description' => $pf->prop('Description'),
            'enabled' => $pf->prop('status') eq 'enabled' ? '1' : '0',
            'src_dip' => $pf->prop('OriDst') || '',
            'name' => $pf->prop('Description') || "pf${counter}_${port}",
            'reflection' => $reflection,
            'reflection_zone' => \@reflection_zones,
            'restrict' => \@allow,
            'log' => $log eq 'none' ? '0' : '1',
            'key' => "pf${counter}_${port}"
        });
    }
    $counter++;
}

print(encode_json({'redirects' => \@redirects}));
