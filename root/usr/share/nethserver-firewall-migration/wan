#!/usr/bin/perl

#
# Copyright (C) 2022 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

use strict;
use warnings;
use JSON;
use esmith::NetworksDB;
use esmith::ConfigDB;
use NethServer::Firewall;

sub slurp {
    my $file = shift;
    my $data;
    open my $fh, '<', $file or die;
    local $/ = undef;
    $data = <$fh>;
    close $fh;

    # trim
    $data =~ s/^\s+|\s+$//g;

    return $data;
}

my $cdb = esmith::ConfigDB->open_ro();
my $fdb = esmith::ConfigDB->open_ro('fwrules');
my $ndb = esmith::NetworksDB->open_ro();
my $fw = new NethServer::Firewall();

my @providers;
my @rules;
my %general;
my %devices;

for my $i ($ndb->get_all_by_prop('type' => 'ethernet')) {
    my $addr_file = '/sys/class/net/'.$i->key.'/address';
    if (-e $addr_file) {
        $devices{$i->key} = slurp($addr_file);
    }
}

my @track_ip = split(/,/, $cdb->get_prop('firewall', 'CheckIP'));
$general{'mode'} = $cdb->get_prop('firewall', 'WanMode') || 'balanced';
$general{'track_ip'} = \@track_ip;
$general{'reliability'} = scalar(@track_ip);
$general{'interval'} = $cdb->get_prop('firewall', 'PingInterval') || '5';

for my $provider ($ndb->get_all_by_prop('type' => 'provider')) {
    my $interface = $provider->prop('interface');
    my $type = $ndb->get_prop($interface, 'type');

    my %p = (
        'name' => $provider->key,
        'weight' => $provider->prop('weight') || '1',
        'type' => $type
    );
    if ($type eq 'ethernet') {
        my $hwaddr = $devices{$interface};
        next if (!$hwaddr);
        $p{'hwaddr'} = $hwaddr;
    } elsif ($type eq 'vlan') {
        my ($device, $vid) = split(/\./,$interface);
        my $hwaddr = $devices{$device};
        next if (!$hwaddr);
        $p{'vid'} = $vid;
        $p{'hwaddr'} = $hwaddr;
    } else {
        $p{'device'} = $interface;
    }

    push(@providers, \%p);
}

for my $rule ($fdb->get_all_by_prop('type' => 'rule')) {
    my $action = $rule->prop('Action');
    if ($action =~ /^provider;(.*)$/) {
        my $provider = $1;
        my $proto = 'any';
        my $dest_port = 'any';
       if (($rule->prop('Service') || 'any') ne 'any') {
            my %service = $fw->getPorts($rule->prop('Service'));
            # generate one rule for each protocol
            foreach my $k (keys(%service)) {
                push(@rules, {
                    'name' => $rule->key."_$k",
                    'proto' => $k,
                    'dest_port' => $service{$k},
                    'sticky' => '1',
                    'src_ip' => $fw->getAddress($rule->prop('Src')),
                    'dest_ip' => $fw->getAddress($rule->prop('Dst')),
                    'description' =>  $rule->prop('Description') || '',
                    'position' => $rule->prop('Position'),
                    'use_policy' => $provider,
                });
            }
        } else {
            push(@rules, {
                'name' => $rule->key,
                'proto' => 'all',
                'dest_port' => '',
                'sticky' => '1',
                'src_ip' => $fw->getAddress($rule->prop('Src')),
                'dest_ip' => $fw->getAddress($rule->prop('Dst')),
                'description' =>  $rule->prop('Description') || '',
                'position' => $rule->prop('Position'),
                'use_policy' => $provider,
            });
        }
    }
}

print(encode_json({
            'providers' => \@providers,
            'rules' => \@rules,
            'general' => \%general,
        }));
