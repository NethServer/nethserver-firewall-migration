#!/usr/bin/perl

#
# Copyright (C) 2022 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

use strict;
use warnings;
use JSON;
use esmith::NetworksDB;
use esmith::ConfigDB;
use NethServer::Firewall;

sub slurp {
    my $file = shift;
    my $data;
    open my $fh, '<', $file or die;
    local $/ = undef;
    $data = <$fh>;
    close $fh;

    # trim
    $data =~ s/^\s+|\s+$//g;

    return $data;
}

sub role2zone {
    my $role = shift;
    if ($role eq 'loc') {
        return 'lan';
    } elsif ($role eq 'net') {
        return 'wan';
    } elsif ($role eq 'blue') {
        return 'guest';
    } elsif ($role eq 'orange') {
        return 'dmz';
    }
    return $role;
}


my $cdb = esmith::ConfigDB->open_ro();
my $fdb = esmith::ConfigDB->open_ro('fwrules');
my $ndb = esmith::NetworksDB->open_ro();
my $fw = new NethServer::Firewall();

my @providers;
my @rules;
my %general;
my %devices;
my @skipped;

my %rules_h = esmith::ConfigDB->as_hash('fwrules');

for my $i ($ndb->get_all_by_prop('type' => 'ethernet')) {
    my $addr_file = '/sys/class/net/'.$i->key.'/address';
    if (-e $addr_file) {
        $devices{$i->key} = slurp($addr_file);
    }
}

my @track_ip = split(/,/, $cdb->get_prop('firewall', 'CheckIP'));
$general{'mode'} = $cdb->get_prop('firewall', 'WanMode') || 'balanced';
$general{'track_ip'} = \@track_ip;
$general{'reliability'} = '1';
$general{'interval'} = $cdb->get_prop('firewall', 'PingInterval') || '5';

for my $provider ($ndb->get_all_by_prop('type' => 'provider')) {
    my $interface = $provider->prop('interface');
    my $type = $ndb->get_prop($interface, 'type');

    my %p = (
        'name' => $provider->key,
        'weight' => $provider->prop('weight') || '1',
        'type' => $type
    );
    if ($type eq 'ethernet') {
        my $hwaddr = $devices{$interface};
        next if (!$hwaddr);
        $p{'hwaddr'} = $hwaddr;
    } elsif ($type eq 'vlan') {
        my ($device, $vid) = split(/\./,$interface);
        my $hwaddr = $devices{$device};
        next if (!$hwaddr);
        $p{'vid'} = $vid;
        $p{'hwaddr'} = $hwaddr;
    } else {
        $p{'device'} = $interface;
    }

    push(@providers, \%p);
}

for my $rule ($fdb->get_all_by_prop('type' => 'rule')) {
    my $action = $rule->prop('Action');
    if ($action =~ /^provider;(.*)$/) {
        $rules_h{$rule->key}{'key'} = $rule->key;
        push(@skipped, $rules_h{$rule->key});
        next;
    }
}

# if there is only one provider enabled,
# make sure to disable the multiwan
if (scalar(@providers) <= 1) {
    @providers = ();
}

print(encode_json({
            'skipped' => \@skipped,
            'providers' => \@providers,
            'rules' => \@rules,
            'general' => \%general,
        }));
